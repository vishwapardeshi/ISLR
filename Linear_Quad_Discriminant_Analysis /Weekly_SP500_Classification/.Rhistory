cat("\n\nThe confidence interval is [", conf_interval[, 2],",",  conf_interval[, 3], "]")
pred_interval <- predict(simple.lm, new_data, interval = "prediction")
cat("\n\nThe prediction interval is [", pred_interval[, 2],",",  pred_interval[, 3], "]")
multiple.lm <- lm(mpg ~ . -name, data = Auto)
summary(multiple.lm)
ggplot(data = Auto, mapping = aes(x = year, y = mpg)) +
geom_boxplot()
diagnostic_plot(multiple.lm)
library(rms)
rms::vif(multiple.lm)
inter.lm1 <- lm(mpg~displacement+origin+year*weight, data=Auto)
inter.lm2 <- lm(mpg~year+origin+displacement*weight, data=Auto)
summary(inter.lm1)
summary(inter.lm2)
nonlinear.lm1 <- lm(mpg~displacement+I(log(weight))+year+origin, data=Auto)
nonlinear.lm2 <- lm(mpg~poly(displacement,3)+weight+year+origin, data=Auto)
nonlinear.lm3 <- lm(mpg~displacement+I(weight^2)+year+origin, data=Auto)
summary(nonlinear.lm1)
summary(nonlinear.lm2)
summary(nonlinear.lm3)
library(ISLR)
summary(Weekly)
head(Weekly)
cat("The auto dataset shape is ", dim(Auto)[1], "x", dim(Auto)[2])
cat("The auto dataset shape is ", dim(Weekly)[1], "x", dim(Weekly)[2])
summary(Weekly)
str(Weekly)
summary(Weekly)
pairs(Weekly)
corr_matrix = cor(Weekly[, -which(names) = 'Direction'])
corr_matrix = cor(Weekly[, -which(names) == 'Direction'])
corr_matrix = cor(Weekly[, -which(Weekly(names)) == 'Direction'])
corr_matrix = cor(Weekly[, -which(Weekly(names) == 'Direction')])
corr_matrix = cor(Weekly[, -which(Weekly(names) = 'Direction')])
corr_matrix = cor(Weekly[, -which(names(Weekly) = 'Direction')])
correlation_matrix <- cor(Weekly[, -which(names(Weekly) = "Direction"])
correlation_matrix <- cor(Weekly[, -which(names(Weekly) = "Direction"])])
correlation_matrix <- cor(Weekly[, -which(names(Weekly) = "Direction")])
correlation_matrix <- cor(Weekly[, -which(names(Weekly) == "Direction")])
library(corrplot)
corrplot(correlation_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
logit.fit <- glm(Direction~., data=Weekly[,c(2:7,9)], family=binomial)
summary(logit.fit)
logit.prob <- predict(logit.fit, Weekly, type="response")
logit.pred <- ifelse(logit.prob > 0.5, "Up", "Down")
table(logit.pred, Weekly$Direction)
table(logit_pred, Weekly$Direction)
logit_prob <- predict(logit.fit, Weekly, type="response")
logit_pred <- ifelse(logit.prob > 0.5, "Up", "Down")
table(logit_pred, Weekly$Direction)
hist(Weekly$Direction)
barplot(Weekly$Direction)
hist(table(Weekly$Direction))
ggplot(Weekly, aes(Direction, Freq, fill=alt)) +
geom_bar(stat="identity", position="dodge")
hist(Weekly$Direction, count(Weekly$Direction))
ggplot(Weekly) +
geom_histogram(aes(x = Direction))
library(ggplot2)
ggplot(Weekly) +
geom_histogram(aes(x = Direction))
ggplot(Weekly) +
geom_bar(aes(x = Direction))
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(corrplot)
library(ggplot2)
logit.fit <- glm(Direction~., data=Weekly[,c(2:7,9)], family=binomial)
summary(logit.fit)
logit_prob <- predict(logit.fit, Weekly, type="response")
logit_pred <- ifelse(logit.prob > 0.5, "Up", "Down")
table(logit_pred, Weekly$Direction)
logit_prob <- predict(logit.fit, Weekly, type="response")
logit_pred <- ifelse(logit.prob > 0.5, "Up", "Down")
conf_matrix <- table(logit_pred, Weekly$Direction)
conf_matrix
logit_prob <- predict(logit.fit, Weekly, type="response")
logit_pred <- ifelse(logit_prob > 0.5, "Up", "Down")
conf_matrix <- table(logit_pred, Weekly$Direction)
conf_matrix
generate_accuracy(conf_matrix)
generate_accuracy <- function(confMatrix){
conf_matrix[1]
}
generate_accuracy(conf_matrix)
generate_accuracy <- function(confMatrix){
conf_matrix[1, 1]
}
generate_accuracy(conf_matrix)
generate_accuracy <- function(confMatrix){
conf_matrix[1, 2]
}
generate_accuracy(conf_matrix)
generate_accuracy <- function(data, confMatrix){
total_accuracy <- (confMatrix[1,1] + confMatrix[2,2])/nrow(data)
class_a_accuracy <- confMatrix[1,1]/(confMatrix[1,1] + confMatrix[1,2]])
generate_accuracy <- function(data, confMatrix){
total_accuracy <- (confMatrix[1,1] + confMatrix[2,2])/nrow(data)
class_a_accuracy <- confMatrix[1,1]/(confMatrix[1,1] + confMatrix[1,2])
class_b_accuracy <- confMatrix[2,2]/(confMatrix[2,1] + confMatrix[2,2])
return(total_accuracy, class_a_accuracy, class_b_accuracy)
}
tot, a, b <-generate_accuracy(conf_matrix)
generate_accuracy <- function(data, confMatrix){
total_accuracy <- (confMatrix[1,1] + confMatrix[2,2])/nrow(data)
class_a_accuracy <- confMatrix[1,1]/(confMatrix[1,1] + confMatrix[1,2])
class_b_accuracy <- confMatrix[2,2]/(confMatrix[2,1] + confMatrix[2,2])
return(total_accuracy, class_a_accuracy, class_b_accuracy)
}
tot <-generate_accuracy(conf_matrix)
generate_accuracy <- function(data, confMatrix){
total_accuracy <- (confMatrix[1,1] + confMatrix[2,2])/nrow(data)
class_a_accuracy <- confMatrix[1,1]/(confMatrix[1,1] + confMatrix[1,2])
class_b_accuracy <- confMatrix[2,2]/(confMatrix[2,1] + confMatrix[2,2])
return(total_accuracy, class_a_accuracy, class_b_accuracy)
}
tot <-generate_accuracy(Weekly, conf_matrix)
generate_accuracy <- function(data, confMatrix){
total_accuracy <- (confMatrix[1,1] + confMatrix[2,2])/nrow(data)
class_a_accuracy <- confMatrix[1,1]/(confMatrix[1,1] + confMatrix[1,2])
class_b_accuracy <- confMatrix[2,2]/(confMatrix[2,1] + confMatrix[2,2])
return(c(total_accuracy, class_a_accuracy, class_b_accuracy))
}
tot <-generate_accuracy(Weekly, conf_matrix)
tot
generate_accuracy <- function(data, confMatrix){
total_accuracy <- (confMatrix[1,1] + confMatrix[2,2])/nrow(data)
class_a_accuracy <- confMatrix[1,1]/(confMatrix[1,1] + confMatrix[2,1])
class_b_accuracy <- confMatrix[2,2]/(confMatrix[1,2] + confMatrix[2,2])
return(c(total_accuracy, class_a_accuracy, class_b_accuracy))
}
acc <-generate_accuracy(Weekly, conf_matrix)
acc
data.frame("measurements"=c("specificity", "sensibility", "precision"), "rate"=c(acc[1], acc[2], acc[3]))
data.frame("measurements"=c("Total Accuracy", "Class Down Accuracy", "Class Up Accuracy"), "rate"=c(acc[1], acc[2], acc[3]))
generate_accuracy <- function(data, confMatrix){
TP = confMatri[2,2]
FP = confMatrix[1,2]
FN = confMatrix[2,1]
TN = confMatrix[1,1]
total_accuracy <- (TP + TN)/nrow(data)
class_a_accuracy <- TN/(TN + FN)
class_b_accuracy <- TP/(FP + TP)
precision <- TP/(TP+FP) # Calculate the Precision
recall <- TP/(TP+FN) # calculate recall
metrics <- data.frame("measurements"=c("Total Accuracy", "Class Down Accuracy", "Class Up Accuracy", "Precision", "Recall"), "rate"=c(total_accuracy, class_a_accuracy, class_b_accuracy, precision, recall)
return(metrics)
generate_accuracy <- function(data, confMatrix){
TP = confMatri[2,2]
FP = confMatrix[1,2]
FN = confMatrix[2,1]
TN = confMatrix[1,1]
total_accuracy <- (TP + TN)/nrow(data)
class_a_accuracy <- TN/(TN + FN)
class_b_accuracy <- TP/(FP + TP)
precision <- TP/(TP+FP) # Calculate the Precision
recall <- TP/(TP+FN) # calculate recall
metrics <- data.frame("measurements"=c("Total Accuracy", "Class Down Accuracy", "Class Up Accuracy", "Precision", "Recall"), "rate"=c(total_accuracy, class_a_accuracy, class_b_accuracy, precision, recall))
return(metrics)
}
acc <-generate_accuracy(Weekly, conf_matrix)
generate_accuracy <- function(data, confMatrix){
TP = confMatrix[2,2]
FP = confMatrix[1,2]
FN = confMatrix[2,1]
TN = confMatrix[1,1]
total_accuracy <- (TP + TN)/nrow(data)
class_a_accuracy <- TN/(TN + FN)
class_b_accuracy <- TP/(FP + TP)
precision <- TP/(TP+FP) # Calculate the Precision
recall <- TP/(TP+FN) # calculate recall
metrics <- data.frame("measurements"=c("Total Accuracy", "Class Down Accuracy", "Class Up Accuracy", "Precision", "Recall"), "rate"=c(total_accuracy, class_a_accuracy, class_b_accuracy, precision, recall))
return(metrics)
}
acc <-generate_accuracy(Weekly, conf_matrix)
acc
generate_accuracy <- function(data, confMatrix){
TP = confMatrix[2,2]
FP = confMatrix[1,2]
FN = confMatrix[2,1]
TN = confMatrix[1,1]
total_accuracy <- (TP + TN)/nrow(data)
class_a_accuracy <- TN/(TN + FN)
class_b_accuracy <- TP/(FP + TP)
precision <- TP/(TP+FP) # Calculate the Precision
recall <- TP/(TP+FN) # calculate recall
metrics <- data.frame("measurements"=c("Total Accuracy", "Class Down Accuracy", "Class Up Accuracy", "Precision", "Recall"), "rate"=c(total_accuracy, class_a_accuracy, class_b_accuracy, precision, recall))
return(metrics)
}
logit_metric <-generate_accuracy(Weekly, conf_matrix)
logit_metric
generate_metric <- function(data, confMatrix){
TP = confMatrix[2,2]
FP = confMatrix[1,2]
FN = confMatrix[2,1]
TN = confMatrix[1,1]
total_accuracy <- (TP + TN)/nrow(data)
class_a_accuracy <- TN/(TN + FN)
class_b_accuracy <- TP/(FP + TP)
precision <- TP/(TP+FP) # Calculate the Precision
recall <- TP/(TP+FN) # calculate recall
metrics <- data.frame("measurements"=c("Total Accuracy", "Class Down Accuracy", "Class Up Accuracy", "Precision", "Recall"), "rate"=c(total_accuracy, class_a_accuracy, class_b_accuracy, precision, recall))
return(metrics)
}
logit_metric <-generate_metric(Weekly, conf_matrix)
logit_metric
library(MASS)
a <- ggplot(Weekly, aes(x = Lag2))
a + geom_freqpoly( aes(color = Direction, linetype = Direction),
bins = 30, size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
plot(Weekly$Direction, Weekly$Lag2)
a <- ggplot(Weekly, aes(x = Lag2))
a + geom_freqpoly( aes(color = Direction, linetype = Direction),
bins = 30, size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
lda.fit.e <- lda(Direction ~ Lag2, data=Weekly, subset=trainset)
train = (Weekly$Year<=2008)
test = Weekly[!trainset,]
train = (Weekly$Year<=2008)
test = Weekly[!train,]
logit.fit <- glm(Direction~., data=Weekly[,c(2:7,9)], subset = train, family=binomial)
summary(logit.fit)
logit.fit <- glm(Direction~., data=Weekly[,c(2:7,9)], family=binomial)
summary(logit.fit)
logit_prob <- predict(logit.fit, Weekly, type="response")
logit_pred <- ifelse(logit_prob > 0.5, "Up", "Down")
conf_matrix <- table(logit_pred, Weekly$Direction)
conf_matrix
generate_metric <- function(data, confMatrix){
TP = confMatrix[2,2]
FP = confMatrix[1,2]
FN = confMatrix[2,1]
TN = confMatrix[1,1]
total_accuracy <- (TP + TN)/nrow(data)
class_a_accuracy <- TN/(TN + FN)
class_b_accuracy <- TP/(FP + TP)
precision <- TP/(TP+FP) # Calculate the Precision
recall <- TP/(TP+FN) # calculate recall
metrics <- data.frame("measurements"=c("Total Accuracy", "Class Down Accuracy", "Class Up Accuracy", "Precision", "Recall"), "rate"=c(total_accuracy, class_a_accuracy, class_b_accuracy, precision, recall))
return(metrics)
}
logit_metric <-generate_metric(Weekly, conf_matrix)
logit_metric
logit.fit.lag2 <- glm(Direction ~ Lag2, data=Weekly, subset=train, family="binomial")
logit_probs <- predict(logit.fit.lag2, type="response", newdata=test)
logit_preds<- ifelse(logit_probs>.5, "Up", "Down")
conf_matrix_2 <- table(logit_preds, test$Direction)
conf_matrix_2
# compute overall of correct predictions
metric_2 <- generate_metric(test, conf_matrix_2)
metric_2
train = (Weekly$Year<=2008)
test = Weekly[!train,]
logit.fit.lag2 <- glm(Direction ~ Lag2, data=Weekly, subset=train, family="binomial")
logit_probs <- predict(logit.fit.lag2, type="response", newdata=test)
logit_preds<- ifelse(logit_probs>.5, "Up", "Down")
conf_matrix_2 <- table(logit_preds, test$Direction)
conf_matrix_2
# compute overall of correct predictions
metric_2 <- generate_metric(test, conf_matrix_2)
metric_2
logit.fit.lag2 <- glm(Direction ~ Lag2, data=Weekly, subset=train, family="binomial")
summary(logit.fit.lag2)
logit_probs <- predict(logit.fit.lag2, type="response", newdata=test)
logit_preds<- ifelse(logit_probs>.5, "Up", "Down")
conf_matrix_2 <- table(logit_preds, test$Direction)
conf_matrix_2
# compute overall of correct predictions
metric_2 <- generate_metric(test, conf_matrix_2)
metric_2
logit.fit.lag2 <- glm(Direction ~ Lag2, data=Weekly, subset=train, family="binomial")
summary(logit.fit.lag2)
logit_probs <- predict(logit.fit.lag2, type="response", newdata=test)
logit_preds<- ifelse(logit_probs>.5, "Up", "Down")
conf_matrix_2 <- table(logit_preds, test$Direction)
conf_matrix_2
# compute overall of correct predictions
metric_2 <- generate_metric(test, conf_matrix_2)
metric_2
plot(Weekly$Volume)
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(corrplot)
library(ggplot2)
library(MASS)
head(Weekly)
cat("The Weekly dataset shape is ", dim(Weekly)[1], "x", dim(Weekly)[2])
summary(Weekly)
ggplot(Weekly) +
geom_bar(aes(x = Direction))
pairs(Weekly)
correlation_matrix <- cor(Weekly[, -which(names(Weekly) == "Direction")])
corrplot(correlation_matrix, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
plot(Weekly$Volume)
logit.fit <- glm(Direction~., data=Weekly[,c(2:7,9)], family=binomial)
summary(logit.fit)
logit_prob <- predict(logit.fit, Weekly, type="response")
logit_pred <- ifelse(logit_prob > 0.5, "Up", "Down")
conf_matrix <- table(logit_pred, Weekly$Direction)
conf_matrix
generate_metric <- function(data, confMatrix){
TP = confMatrix[2,2]
FP = confMatrix[1,2]
FN = confMatrix[2,1]
TN = confMatrix[1,1]
total_accuracy <- (TP + TN)/nrow(data)
class_a_accuracy <- TN/(TN + FN)
class_b_accuracy <- TP/(FP + TP)
precision <- TP/(TP+FP) # Calculate the Precision
recall <- TP/(TP+FN) # calculate recall
metrics <- data.frame("measurements"=c("Total Accuracy", "Class Down Accuracy", "Class Up Accuracy", "Precision", "Recall"), "rate"=c(total_accuracy, class_a_accuracy, class_b_accuracy, precision, recall))
return(metrics)
}
logit_metric <-generate_metric(Weekly, conf_matrix)
logit_metric
train = (Weekly$Year<=2008)
test = Weekly[!train,]
logit.fit.lag2 <- glm(Direction ~ Lag2, data=Weekly, subset=train, family="binomial")
summary(logit.fit.lag2)
logit_probs <- predict(logit.fit.lag2, type="response", newdata=test)
logit_preds<- ifelse(logit_probs>.5, "Up", "Down")
conf_matrix_2 <- table(logit_preds, test$Direction)
conf_matrix_2
# compute overall of correct predictions
metric_2 <- generate_metric(test, conf_matrix_2)
metric_2
lda.fit <- lda(Direction ~ Lag2, data=Weekly, subset=train, family="binomial")
summary(lda.fit)
lda.fit
lda.fit <- lda(Direction ~ Lag2, data=Weekly, subset=train, family="binomial")
lda.fit
plot(lda.fit)
plot(lda.fit)
lda.fit <- lda(Direction ~ Lag2, data=Weekly, subset=train)
lda.fit
plot(lda.fit)
lda_preds <- predict(lda.fit.e, newdata=testset)
lda_preds <- predict(lda.fit, newdata=test)
conf_matrix_lda <- table(lda_preds, test$Direction)
lda_preds <- predict(lda.fit, newdata=test)
conf_matrix_lda <- table(lda_preds$class, test$Direction)
conf_matrix_lda
# compute overall of correct predictions
metric_lda <- generate_metric(test, conf_matrix_lda)
metric_lda
quad.fit <- qda(Direction ~ Lag2, data=Weekly, subset=train)
quad.fit
plot(qda.fit)
qda_preds <- predict(qda.fit, newdata=test)
qda_preds <- predict(quad.fit, newdata=test)
conf_matrix_qda <- table(qda_preds$class, test$Direction)
conf_matrix_qda
# compute overall of correct predictions
metric_qda <- generate_metric(test, conf_matrix_qda)
metric_qda
qda_preds <- predict(quad.fit, newdata=test)
conf_matrix_qda <- table(qda_preds$class, test$Direction)
conf_matrix_qda
# compute overall of correct predictions
metric_qda <- generate_metric(test, conf_matrix_qda)
metric_qda
knittr::purl(Fuel_Efficiency_Linear_Regression.Rmd)
knitr::purl(Fuel_Efficiency_Linear_Regression.Rmd)
cd ..
setwd("~/Documents/GitHub/Machine-Learning-Projects/Linear_Regression/Fuel_Efficiency_Prediction")
knitr::purl(Fuel_Efficiency_Linear_Regression.Rmd)
knitr::purl("Fuel_Efficiency_Linear_Regression.Rmd")
knitr::purl("Fuel_Efficiency_Linear_Regression.Rmd", documentation = 2)
knitr::purl("Fuel_Efficiency_Linear_Regression.Rmd", documentation = 2)
setwd("~/Documents/GitHub/Machine-Learning-Projects/Logistic_Regression/Weekly_SP500_Return_Direction")
knitr::purl("Predicting_S-P_Direction.Rmd", documentation = 2)
knitr::purl("Predicting_S&P_Direction.Rmd", documentation = 2)
setwd("~/Documents/GitHub/Machine-Learning-Projects/Linear_Quad_Discriminant_Analysis /Weekly_SP500_Classification")
knitr::purl("Predicting_SP500_Direction.Rmd", documentation = 2)
# Load standard libraries
library(tidyverse)
library(MASS) # Modern applied statistics functions
library(corrplot)
#loading housing price data in variable Boston
data("Boston")
#vector for predictor, response and variables
variables <- c(colnames(Boston))
response <- "medv"
predictor <- variables[!(variables %in% response)]
coefficientLinear <- c()
cat("\nLinear Regression for response variable medv.")
for(var in predictor){
cat("\n\nFor predictor variable", var, ":\nThe estimated coefficient and p-value: \n")
model <- lm(medv ~ Boston[,var], data = Boston)
summaryModel <- summary(model)
printCoefmat(coef(summary(model)))
coefficientLinear[length(coefficientLinear) + 1] <- as.numeric(summaryModel$coefficients[2,1])
if(summaryModel$coefficients[2,4] < 0.05){
cat("At a signifance level of 0.05, the predictor variable", var, "is statistically significant.")
}
else{
cat("At a signifance level of 0.05, the predictor variable", var, "is not statistically significant.")
}
}
#plots for each predictors
Boston %>%
gather(key, val, -medv) %>%
ggplot(aes(x = val, y = medv)) +
geom_point() +
stat_smooth(method = "lm", se = TRUE, col = "blue") +
facet_wrap(~key, scales = "free") +
theme_gray() +
ggtitle("Figure 3: Scatter plot of predictor variables vs Median Value (medv)")
knitr::opts_chunk$set(echo = TRUE)
require(ISLR)
require(boot)
data(Wage)
set.seed(1)
# cross-validation
cv.error <- rep(0,10)
for (i in 1:10) {
glm.fit <- glm(wage~poly(age,i), data=Wage)
cv.error[i] <- cv.glm(Wage, glm.fit, K=10)$delta[1]  # [1]:std, [2]:bias-corrected
}
cv.error
plot(cv.error, type="b")
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(boot)
set.seed(1)
cv.error <- rep(0,10)
for (i in 1:10) {
glm.fit <- glm(wage~poly(age,i), data=Wage)
cv.error[i] <- cv.glm(Wage, glm.fit, K=10)$delta[1]  # [1]:std, [2]:bias-corrected
}
cv.error
plot(cv.error, type="b")
fit.01 <- lm(wage~age, data=Wage)
fit.02 <- lm(wage~poly(age,2), data=Wage)
fit.03 <- lm(wage~poly(age,3), data=Wage)
fit.04 <- lm(wage~poly(age,4), data=Wage)
fit.05 <- lm(wage~poly(age,5), data=Wage)
fit.06 <- lm(wage~poly(age,6), data=Wage)
fit.07 <- lm(wage~poly(age,7), data=Wage)
fit.08 <- lm(wage~poly(age,8), data=Wage)
fit.09 <- lm(wage~poly(age,9), data=Wage)
fit.10 <- lm(wage~poly(age,10), data=Wage)
anova(fit.01,fit.02,fit.03,fit.04,fit.05,fit.06,fit.07,fit.08,fit.09,fit.10)
agelims <- range(Wage$age)
age.grid <- seq(agelims[1], agelims[2])
preds <- predict(fit.09, newdata=list(age=age.grid), se=TRUE)
se.bands <- preds$fit + cbind(2*preds$se.fit, -2*preds$se.fit)
par(mfrow=c(1,1), mar=c(4.5,4.5,1,1), oma=c(0,0,4,0))
plot(Wage$age, Wage$wage, xlim=agelims, cex=0.5, col="darkgrey")
title("Degree 4 Polynomial Fit", outer=TRUE)
lines(age.grid, preds$fit, lwd=2, col="blue")
matlines(age.grid, se.bands, lwd=1, col="blue", lty=3)
agelims <- range(Wage$age)
age.grid <- seq(agelims[1], agelims[2])
preds <- predict(fit.09, newdata=list(age=age.grid), se=TRUE)
se.bands <- preds$fit + cbind(2*preds$se.fit, -2*preds$se.fit)
par(mfrow=c(1,1), mar=c(4.5,4.5,1,1), oma=c(0,0,4,0))
plot(Wage$age, Wage$wage, xlim=agelims, cex=0.5, col="darkgrey")
title("Degree 9 Polynomial Fit", outer=TRUE)
lines(age.grid, preds$fit, lwd=2, col="blue")
matlines(age.grid, se.bands, lwd=1, col="blue", lty=3)
set.seed(1)
# cross-validation
cv.error <- rep(0,9)
for (i in 2:10) {
Wage$age.cut <- cut(Wage$age,i)
glm.fit <- glm(wage~age.cut, data=Wage)
cv.error[i-1] <- cv.glm(Wage, glm.fit, K=10)$delta[1]  # [1]:std, [2]:bias-corrected
}
cv.error
plot(2:10, cv.error, type="b")
source('~/.active-rstudio-document', echo=TRUE)
library(ISLR)
library(MASS)
fit.cubic <- lm(nox~poly(dis,3), data=Boston)
dislims <- range(Boston$dis)
dis.grid <- seq(dislims[1], dislims[2], 0.1)
preds <- predict(fit.cubic, newdata=list(dis=dis.grid), se=TRUE)
se.bands <- preds$fit + cbind(2*preds$se.fit, -2*preds$se.fit)
par(mfrow=c(1,1), mar=c(4.5,4.5,1,1), oma=c(0,0,4,0))
plot(Boston$dis, Boston$nox, xlim=dislims, cex=0.5, col="darkgrey")
title("Degree 3 Polynomial Fit")
lines(dis.grid, preds$fit, lwd=2, col="blue")
matlines(dis.grid, se.bands, lwd=1, col="blue", lty=3)
summary(fit.cubic)
rss.error <- rep(0,10)
for (i in 1:10) {
lm.fit <- lm(nox~poly(dis,i), data=Boston)
rss.error[i] <- sum(lm.fit$residuals^2)
}
rss.error
plot(rss.error, type="b")
library(splines)
fit.spline <- lm(nox~bs(dis, df=4), data=Boston)
pred <- predict(fit.spline, newdata=list(dis=dis.grid), se=T)
plot(Boston$dis, Boston$nox, col="gray")
lines(dis.grid, pred$fit, lwd=2)
lines(dis.grid, pred$fit+2*pred$se, lty="dashed")
lines(dis.grid, pred$fit-2*pred$se, lty="dashed")
#set df to select knots at uniform quantiles of `dis`
attr(bs(Boston$dis,df=4),"knots")  # only 1 knot at 50th percentile
set.seed(1)
rss.error <- rep(0,7)
for (i in 4:10) {
fit.sp <- lm(nox~bs(dis, df=i), data=Boston)
rss.error[i-3] <- sum(fit.sp$residuals^2)
}
rss.error
plot(4:10, rss.error, type="b")  # RSS decreases on train set w more flexible fit
source('~/.active-rstudio-document', echo=TRUE)
